// ===============================================
// ARCHIVO: shared/context/AuthContext/enums.ts
// -----------------------------------------------
// Este archivo define las ‚Äúacciones‚Äù posibles del sistema de autenticaci√≥n
// como un ENUM de TypeScript. 
// Los enums sirven para escribir nombres de acciones m√°s claros,
// seguros y f√°ciles de mantener, evitando errores de escritura en strings.
// ===============================================

// Definimos un enumerado (enum) llamado AUTH_ACTIONS.
// Cada valor representa una acci√≥n que puede ejecutar el AuthProvider
// (por ejemplo: iniciar sesi√≥n, cerrar sesi√≥n, etc.)
export enum AUTH_ACTIONS {
  // Iniciar sesi√≥n del usuario (login)
  LOGIN = "LOGIN",

  // Cerrar sesi√≥n del usuario (logout)
  LOGOUT = "LOGOUT",

  // Guardar o actualizar el token de autenticaci√≥n
  SET_TOKEN = "SET_TOKEN",

  // Guardar o actualizar los datos del usuario
  SET_USER = "SET_USER",

  // Cambiar el estado de ‚Äúcargando‚Äù (por ejemplo, al iniciar sesi√≥n)
  SET_LOADING = "SET_LOADING",

  // Cambiar el estado de carga de recursos adicionales (im√°genes, datos, etc.)
  SET_ASSETS_LOADING = "SET_ASSETS_LOADING",
}

// ===============================================
// EXPLICACI√ìN GENERAL (para defensa oral)
// ===============================================
//
// üîπ ¬øQu√© es un ENUM?
// Un `enum` (enumeraci√≥n) en TypeScript es una lista de valores constantes
// con nombres descriptivos. 
// En este caso, representa las distintas **acciones posibles**
// que puede ejecutar el sistema de autenticaci√≥n.
//
// üîπ ¬øPor qu√© se usa?
// - Evita errores de escritura (por ejemplo, "logIn" vs "LOGIN").
// - Permite mantener todas las acciones en un solo lugar centralizado.
// - Hace que el c√≥digo del reducer sea m√°s legible y mantenible.
//
// üîπ ¬øD√≥nde se usa este enum?
// - Dentro del `auth-provider.tsx` para identificar las acciones del reducer.
//   Ejemplo:
//
//   ```tsx
//   switch (action.type) {
//     case AUTH_ACTIONS.LOGIN:
//       ...
//     case AUTH_ACTIONS.LOGOUT:
//       ...
//   }
//   ```
//
// - Tambi√©n se puede usar en cualquier parte de la app donde se dispare una acci√≥n,
//   por ejemplo:
//
//   ```tsx
//   dispatch({ type: AUTH_ACTIONS.SET_USER, payload: { user: data } });
//   ```
//
// üîπ ¬øQu√© representa cada acci√≥n?
//
// | Acci√≥n | Descripci√≥n |
// |:-------------------|:------------------------------------|
// | **LOGIN** | Guarda los datos del usuario y sus tokens al iniciar sesi√≥n. |
// | **LOGOUT** | Borra la informaci√≥n del usuario (cierra sesi√≥n). |
// | **SET_TOKEN** | Actualiza o guarda el token actual sin cambiar el usuario. |
// | **SET_USER** | Cambia los datos del usuario (por ejemplo, si se editan). |
// | **SET_LOADING** | Controla el estado de carga general (pantalla de login o fetch inicial). |
// | **SET_ASSETS_LOADING** | Indica si la app est√° cargando recursos (como im√°genes, √≠conos, etc.). |
//
// üîπ Ventajas de este enfoque:
// - C√≥digo m√°s claro y mantenible.
// - Facilita el trabajo en grupo (todos usan los mismos nombres de acciones).
// - Evita errores por strings mal escritos.
// - Mejora la integraci√≥n con TypeScript (autocompletado y chequeo de tipos).
//
// üîπ En resumen:
// Este archivo act√∫a como el ‚Äúdiccionario‚Äù de acciones que el AuthProvider
// entiende y puede ejecutar. Es una pieza peque√±a pero fundamental
// dentro del sistema de autenticaci√≥n global.
//
