// ===============================================
// COMPONENTE: Button (Bot√≥n reutilizable)
// Archivo: components/Button/index.tsx
// Este componente define un bot√≥n personalizado reutilizable en toda la app.
// Usa estilos propios y colores del sistema de dise√±o (materialColors).
// ===============================================

// Importamos componentes base de React Native
import { TouchableOpacity, View, Text, StyleSheet } from "react-native";

// Importamos los colores del tema (Material Design adaptado)
import { materialColors } from "../../utils/colors";

// ===============================================
// INTERFAZ DE PROPIEDADES (TypeScript)
// ===============================================
//
// Define qu√© datos recibe el bot√≥n:
// - onPress: funci√≥n que se ejecuta cuando el bot√≥n se toca.
// - disabled: indica si el bot√≥n est√° deshabilitado (opcional).
// - title: texto que se muestra dentro del bot√≥n.
//
interface IProps {
  onPress: () => void;
  disabled?: boolean;
  title: string;
}

// ===============================================
// COMPONENTE PRINCIPAL: Button
// ===============================================
//
// Este componente se usa para mantener consistencia visual
// en todos los botones de la aplicaci√≥n.
//
export default function Button(props: IProps) {
  // Desestructuramos las props para usarlas m√°s f√°cilmente
  const { onPress, disabled, title } = props;

  // Renderizado visual
  return (
    // TouchableOpacity permite detectar la interacci√≥n t√°ctil del usuario
    <TouchableOpacity onPress={onPress} disabled={disabled}>
      {/* View que define el fondo y bordes del bot√≥n */}
      <View
        style={{
          ...styles.container,
          ...(disabled && styles.disabledContainer), // aplica estilo distinto si est√° deshabilitado
        }}
      >
        {/* Texto del bot√≥n */}
        <Text style={styles.text}>{title}</Text>
      </View>
    </TouchableOpacity>
  );
}

// ===============================================
// ESTILOS
// ===============================================
const styles = StyleSheet.create({
  // Estilo base del contenedor del bot√≥n
  container: {
    backgroundColor: materialColors.schemes.dark.primary, // color principal del tema oscuro
    borderRadius: 8, // bordes redondeados
    padding: 12, // espacio interno (padding)
  },

  // Estilo alternativo cuando el bot√≥n est√° deshabilitado
  disabledContainer: {
    backgroundColor: materialColors.coreColors.neutral, // color gris neutro
  },

  // Estilo del texto dentro del bot√≥n
  text: {
    color: materialColors.schemes.dark.onPrimary, // color de texto sobre fondo primario
  },
});

// ===============================================
// EXPLICACI√ìN GENERAL (para defensa oral)
// ===============================================
//
// üîπ Este componente representa un bot√≥n gen√©rico reutilizable.
//    Se usa en distintas pantallas como ‚ÄúFarmacias‚Äù, ‚ÄúEscuelas‚Äù, ‚ÄúNotas‚Äù, etc.
//
// FUNCIONAMIENTO:
//
// 1Ô∏è‚É£ `TouchableOpacity` ‚Üí detecta la pulsaci√≥n del usuario y ejecuta `onPress`.
// 2Ô∏è‚É£ `disabled` ‚Üí cuando es true, el bot√≥n no responde y cambia de color.
// 3Ô∏è‚É£ `View` ‚Üí define la caja visual del bot√≥n (fondo, forma y color).
// 4Ô∏è‚É£ `Text` ‚Üí muestra el texto que se pasa en `title`.
// 5Ô∏è‚É£ `materialColors` ‚Üí garantiza coherencia visual con el resto de la app.
//
// CONCEPTOS CLAVE:
//
// - Reutilizaci√≥n: en lugar de crear botones distintos en cada pantalla,
//   se crea un componente gen√©rico que recibe texto y acci√≥n como props.
//
// - Desestructuraci√≥n: permite acceder f√°cilmente a las props sin usar `props.` todo el tiempo.
//
// - Operador spread (`...`):
//   Aplica varios estilos combinando objetos, por ejemplo:
//   `{...styles.container, ...(disabled && styles.disabledContainer)}`
//   ‚Üí si el bot√≥n est√° deshabilitado, agrega ese estilo extra.
//
// FUTURAS MEJORAS:
//
// - Agregar una prop para cambiar el color o tama√±o del bot√≥n.
// - Incluir un √≠cono junto al texto (por ejemplo, usando Ionicons).
// - A√±adir animaci√≥n de ‚Äúpresionado‚Äù o ‚Äúloading‚Äù.
//
// OBJETIVO EN LA DEFENSA:
//
// Mostrar que entend√©s c√≥mo crear componentes reutilizables,
// c√≥mo se manejan las props y los estados visuales,
// y c√≥mo se aplican estilos condicionales en React Native.
//
